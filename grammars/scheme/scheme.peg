
package main

type Parser Peg {
    Scheme
}

Start
    <- (Comment / List)* eof

List       
    <-  <begin_paren Operator (spacing* Value)* end_paren> {p.EndList(text)}

Value 
    <- True
       / False
       / Nil
       / Character
       / String
       / Number
       / List

Comment
    <- ws* ';' (!eol .)* eol

Operator
    <- <char*> {p.NewOP(text)}

True   
    <- <"#t"> {p.NewBool(text)}

False  
    <- <"#f"> {p.NewBool(text)}

Nil   
    <- <"nil"> {p.NewNil(text)}

String 
    <- doublequote <char*> doublequote {p.NewString(text)}

Character
    <- "#\\" <char> {p.NewChar(text)}

char   
    <- (!doublequote !ws !Keywords .)

Number 
    <- <'0'
       / [1-9] Digit* ('.' Digit*)?> {p.NewNumber(text)}

Digit  
    <- [0-9]

Keywords
    <- [;#]

begin_paren     <- spacing* "(" spacing* {p.BeginList()}
end_paren       <- spacing* ")" spacing* 
ws              <- [ \r\n\t]
spacing         <- ws / Comment
backslash       <- '\\'
doublequote     <- '"'
eol             <- '\n'
eof             <- !.
